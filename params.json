{"name":"Baudcast","tagline":"A socket-based, realtime messaging API; designed for the internet of things.","body":"# baudcast\r\n\r\n![dependencies](https://david-dm.org/nilakshdas/baudcast.png)\r\n\r\nA socket-based, realtime messaging API; designed for the **internet of things**.\r\n\r\n*baudcast* is a node module that allows machine-to-machine (M2M) communication of internet-connected devices over a simple and configurable REST API.\r\n\r\nNo registration/setup required, just start *baudcasting* and receiving key-value data right away.\r\n\r\n## Installation\r\n\r\nOpen your app's folder in the terminal and run the following command:\r\n\r\n```sh\r\n$ npm install baudcast\r\n```\r\n\r\n## Usage\r\n\r\n*baudcast* can be easily configured to use custom endpoints and response templates.\r\n\r\nAs an example, the [HAPI](https://github.com/jheising/HAPI)-REST API specification has been implemented with *baudcast*:\r\n\r\n```javascript\r\nvar app = require('express')();\r\nvar bodyParser = require('body-parser');\r\nvar server = require('http').Server(app);\r\nvar client = require('redis').createClient();\r\nvar baudcast = require('baudcast')(server, client);\r\n\r\napp.use(bodyParser()); // necessary for handling POST variables\r\n\r\napp.get('/', function(req, res) { res.send('<i>baudcasting</i> things...'); });\r\n\r\n\r\n/* set up endpoint to make a baudcast */\r\napp.post('/baudcast/for/:thing', baudcast.route.makeNewBaudcast);\r\napp.get('/baudcast/for/:thing', baudcast.route.makeNewBaudcast); // GET works too\r\n\r\n/* set up endpoint to get last baudcast */\r\napp.get('/get/last/baudcast/from/:thing', baudcast.route.getLastBaudcast);\r\n\r\n/* set up endpoint to get last 800 baudcasts */\r\napp.get('/get/baudcasts/from/:thing', baudcast.route.getBaudcasts);\r\n\r\n\r\n/* set up custom response template */\r\nvar template = {\r\n\tverb: {\r\n\t\tget: 'getting',\r\n\t\tcreate: 'creating'\r\n\t},\r\n\r\n\trespondSuccess: function (action, resourceType, data) {\r\n\t\tvar response = {\r\n\t\t\tthis: \"succeeded\",\r\n\t\t\tby: this.verb[action],\r\n\t\t\tthe: resourceType,\r\n\t\t\twith: data\r\n\t\t};\r\n\r\n\t\treturn response;\r\n\t},\r\n\r\n\trespondFailure: function(why, apiErrorCode) {\r\n\t\tvar response = {\r\n\t\t\tthis: \"failed\",\r\n\t\t\twith: apiErrorCode || 500,\r\n\t\t\tbecause: why\r\n\t\t};\r\n\r\n\t\treturn response;\r\n\t}\r\n};\r\n\r\nbaudcast.useTemplate(template);\r\n\r\n\r\napp.listen(3000);\r\nserver.listen(8888);\r\nconsole.log('Server on port 3000, socket on port 8888...');\r\n```\r\n\r\n### *baudcasting*\r\n\r\nSimply call the following URL(as set up in the code) to make a new *baudcast*:\r\n\r\n```\r\nhttp://{some-host}:3000/baudcast/for/{thing}?foo=bar&baz=qux\r\n```\r\n\r\nThe server will respond with:\r\n\r\n```json\r\n{\r\n\t\"this\": \"succeeded\",\r\n\t\"by\": \"creating\",\r\n\t\"the\": \"baudcast\",\r\n\t\"with\": {\r\n\t\t\"thing\": \"{thing}\",\r\n\t\t\"created\": 1402642240997,\r\n\t\t\"content\": {\r\n\t\t\t\"foo\": \"bar\",\r\n\t\t\t\"baz\": \"qux\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThe POST method can also be used to *baudcast* valid JSON data.\r\n\r\n### Getting *baudcasts*\r\n\r\nThe last 800 *baudcasts* made by a *thing* over the last 24 hours can be retrieved by calling the following URL:\r\n\r\n```\r\nhttp://{some-host}:3000/get/baudcasts/from/{thing}\r\n```\r\n\r\nThe server will return an array of *baudcasts* in the following form:\r\n\r\n```json\r\n{\r\n\t\"this\": \"succeeded\",\r\n\t\"by\": \"getting\",\r\n\t\"the\": \"baudcasts\",\r\n\t\"with\": [\r\n\t\t{\r\n\t\t\t\"thing\": \"{thing}\",\r\n\t\t\t\"created\": 1402642240997,\r\n\t\t\t\"content\": {\r\n\t\t\t\t\"hello\": \"again\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"thing\": \"{thing}\",\r\n\t\t\t\"created\": 1402640319211,\r\n\t\t\t\"content\": {\r\n\t\t\t\t\"hello\": \"world\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nThe latest *baudcast* made by a thing can be retrieved by making a call to the following URL:\r\n\r\n```\r\nhttp://{some-host}:3000/get/last/baudcast/from/{thing}\r\n```\r\n\r\nThe server will return a single baudcast in the following form:\r\n\r\n```json\r\n{\r\n\t\"this\": \"succeeded\",\r\n\t\"by\": \"getting\",\r\n\t\"the\": \"baudcast\",\r\n\t\"with\": {\r\n\t\t\"thing\": \"{thing}\",\r\n\t\t\"created\": 1402642240997,\r\n\t\t\"content\": {\r\n\t\t\t\"foo\": \"bar\",\r\n\t\t\t\"baz\": \"qux\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nApart from the API endpoints, a device can also subscribe to a *thing* (or publish a new *baudcast*) using the popular **socket.io** framework.\r\n\r\nTo use *baudcast* with js, just include the **socket.io** script:\r\n\r\n```html\r\n<script src=\"https://cdn.socket.io/socket.io-1.0.4.js\"></script>\r\n```\r\n\r\nand use the following code:\r\n\r\n```javascript\r\nvar socket = io('http://{some-host}:8888');\r\n\r\nsocket.emit('subscribe', '{thing}'); // you can subscribe to as many things you like\r\n\r\nsocket.on('baudcast', function(baudcast) {\r\n\t// do your magic here\r\n\tconsole.log(baudcast);\r\n\r\n});\r\n\r\nsocket.emit('baudcast', '{another-thing}', {ping: 'pong'});\r\n```\r\n\r\nEach *baudcast* received, for a subscribed *thing* will be an Object of the form:\r\n\r\n```\r\n{\r\n\tthing: \"{thing}\",\r\n\tcreated: 1402642240997,\r\n\tcontent: {\r\n\t\tfoo: \"bar\",\r\n\t\tbaz: \"qux\"\r\n\t}\r\n}\r\n```\r\n\r\n## API\r\n\r\n#### for(thing, content)\r\n\r\nThis function makes a new *baudcast* for a *thing*.\r\n\r\n#### from(thing, callback)\r\n\r\nThis function executes callback(baudcast) everytime a *thing* makes a new *baudcast*.\r\n\r\n#### route.makeNewBaudcast(req, res)\r\n\r\nThis is the app handler for making a new *baudcast*. This supports POST as well as GET variables.\r\n\r\n#### route.getLastBaudcast(req, res)\r\n\r\nThis is the handler for retrieving the most recent *baudcast* made by a *thing*.\r\nSince *baudcasts* are realtime and ephemeral, they are only stored for 24 hours.\r\n\r\n#### route.getBaudcasts(req, res)\r\n\r\nThis is the handler for retrieving all the *baudcasts* made by a *thing*.\r\nAgain, because *baudcasts* are ephemeral, only the last 800 *baudcasts* are stored.\r\n\r\n#### useTemplate(newTemplate)\r\n\r\nThis function is used to specify the response template of the REST API. Note that it's argument is a JSON object that should contain the methods `respondSuccess` and `respondFailure`, whose signatures should follow guidelines in the example.\r\n\r\n## Examples\r\n\r\n[Simple wireless control of Arduino LED](https://github.com/nilakshdas/baudcast/wiki/Example:-Simple-wireless-control-of-Arduino-LED)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}